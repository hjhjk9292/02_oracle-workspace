--실습문제--

--도서관리 프로그램을 만들기 위한 테이블을 만들기
--이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석달기


--1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)

--컬럼: PUB_NO(출판사번호) --기본키(PUBLISHER_PK)
-- PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)
-- PHONE(출판사전화번호) --제약조건 없음
DROP TABLE TB_PUBLISHER;

CREATE TABLE TB_PUBLISHER (
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(20) CONSTRAINT PUBLICHSER_NN NOT NULL, 
    PHONE VARCHAR2(13)
);

COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사전화번호';

INSERT INTO TB_PUBLISHER (PUB_NO, PUB_NAME, PHONE) VALUES (1, 'A출판사', '010-1111-2222');
INSERT INTO TB_PUBLISHER (PUB_NO, PUB_NAME, PHONE) VALUES (2, 'B출판사', '010-2222-3333');
INSERT INTO TB_PUBLISHER (PUB_NO, PUB_NAME, PHONE) VALUES (3, 'C출판사', '010-3333-4444');

SELECT * FROM TB_PUBLISHER;

--2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)

--컬럼: BK_NO(도서번호) --기본키(BOOK_PK)
-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)
-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)
-- BK_PRICE(가격)

-- BK_STOCK(재고) --기본값 1로 지정

---- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)
-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정

--5개 정도의 샘플 데이터 추가하기
DROP TABLE TB_BOOK;

SELECT * FROM TB_BOOK;

CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(30) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT 1,
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER (PUB_NO) ON DELETE CASCADE
);

COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';

INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_STOCK, BK_PUB_NO) 
VALUES (1, '자바', '차은우', 10000, 10, 1);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_STOCK, BK_PUB_NO) 
VALUES (2, '파이썬', '장원영', 20000, 5, 2);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_STOCK, BK_PUB_NO) 
VALUES (3, 'SQL', '손흥민', 30000, 8, 3);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_STOCK, BK_PUB_NO) 
VALUES (4, '책책책', '황희찬', 40000, 21, 3);
INSERT INTO TB_BOOK (BK_NO, BK_TITLE, BK_AUTHOR, BK_PRICE, BK_STOCK, BK_PUB_NO) 
VALUES (5, '책', '김준수', 50000, 19, 3);

--3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
--컬럼명:
--MEMBER_NO(회원번호) --기본키(MEMBER_PK)
-- MEMBER_ID(아이디) --중복금지(MEMBER_UQ)
--MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)
--MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)
--GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
--ADDRESS(주소)
--PHONE(연락처)
--STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)
--ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)

--5개 정도의 샘플 데이터 추가하기
DROP TABLE TB_MEMBER;

SELECT * FROM TB_MEMBER;

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN('M', 'F')),
    ADDRESS VARCHAR2(50),
    PHONE VARCHAR2(20),
    STATUS VARCHAR2(1) DEFAULT 'N' CHECK(STATUS IN ('N', 'Y')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);


COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';

INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE) 
VALUES (1, 'user01', 'pass01', '김현지', 'F', '경기 성남시', '010-1111-2222', 'N', SYSDATE);
INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE) 
VALUES (2, 'user02', 'pass02', '이진욱', 'M', '서울 강남구', '010-2222-3333', 'Y', SYSDATE);
INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE) 
VALUES (3, 'user03', 'pass03', '이정재', 'F', '경기 하남시', '010-3333-4444', 'Y', SYSDATE);
INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE) 
VALUES (4, 'user04', 'pass04', '김고은', 'F', '서울 송파구', '010-4444-5555', 'N', SYSDATE);
INSERT INTO TB_MEMBER (MEMBER_NO, MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, ADDRESS, PHONE, STATUS, ENROLL_DATE) 
VALUES (5, 'user05', 'pass05', '한소희', 'F', '서울 광진구', '010-5555-6666', 'Y', SYSDATE);


--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
--컬럼:
--RENT_NO(대여번호) --기본키(RENT_PK)

----RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
--이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정     

---- ALTER RENT_MEM_NO ADD FOREIGN KEY(RENT_FK_MEM) REFERENCES TB_MEMBER;
-- 데이터 생성 시 작성 RENT_MEM_NO NUMBER REFERENCES RENT_FK_MEM ON DELETE SET NULL

---- RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK 와 참조하도록
-- 이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정

---- ALTER TB_RENT ADD FOREIGN KEY(RENT_FK_BOOK) REFERENCES TB_BOOK;
-- RENT_BOOK_NO NUMBER REFERENCES RENT_FK_BOOK ON DELETE SET NULL

--RENT_DATE(대여일) --기본값 SYSDATE

--샘플데이터 3개정도 추가하기

DROP TABLE TB_RENT;

SELECT * FROM TB_RENT;

CREATE TABLE TB_RENT (
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER (MEMBER_NO) ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK (BK_NO) ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);

COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';

INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO, RENT_DATE) 
VALUES (1001, 1, 2, SYSDATE);
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO, RENT_DATE) 
VALUES (1002, 2, 3, SYSDATE);


SELECT * FROM TB_PUBLISHER; --1
SELECT * FROM TB_BOOK; --2 부모키
SELECT * FROM TB_MEMBER; --3 안 만들어지고 있는 테이블
SELECT * FROM TB_RENT;  --4 외래키 참조, 옵션


--2번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.
SELECT MEMBER_NAME AS "회원이름", MEMBER_ID AS "회원아이디", RENT_DATE AS "대여일", RENT_DATE +7 AS "반납예정일(대여일+7)"
FROM TB_MEMBER
JOIN TB_RENT ON (MEMBER_NO = RENT_MEM_NO)
WHERE RENT_BOOK_NO = 2;



SELECT M.MEMBER_NAME AS "회원이름", 
       M.MEMBER_ID AS "회원아이디", 
       R.RENT_DATE AS "대여일", 
       R.RENT_DATE + 7 AS "반납예정일"
FROM TB_MEMBER M
JOIN TB_RENT R ON M.MEMBER_NO = R.RENT_MEM_NO
WHERE R.RENT_BOOK_NO = 2;

