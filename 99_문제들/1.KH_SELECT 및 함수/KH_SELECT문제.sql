--1. JOB 테이블의 모든 정보 조회 
SELECT *
FROM JOB;


--2. JOB 테이블의 직급 이름 조회 
SELECT JOB_NAME
FROM JOB;


--3. DEPARTMENT 테이블의 모든 정보 조회 
SELECT *
FROM DEPARTMENT;


--4. EMPLOYEE테이블의 직원명, 이메일, 전화번호, 고용일 조회 
SELECT EMP_NAME, EMAIL, PHONE, HIRE_DATE
FROM EMPLOYEE;


--5. EMPLOYEE테이블의 고용일, 사원 이름, 월급 조회 
SELECT HIRE_DATE, EMP_NAME, SALARY
FROM EMPLOYEE;


----6. EMPLOYEE테이블에서 이름, 연봉, 총수령액(보너스포함), 실수령액(총수령액 - (연봉*세금 3%)) 조회 
SELECT EMP_NAME, 
        SALARY * 12 AS "연봉", 
        (SALARY * 12 + SALARY * 12 * BONUS) AS "총수령액",
        ((SALARY * 12 + SALARY * 12* BONUS) - (SALARY * 12 *0.03)) AS "실수령액"
FROM EMPLOYEE;


--7. EMPLOYEE테이블에서 SAL_LEVEL이 S1인 사원의 이름, 월급, 고용일, 연락처 조회 
SELECT EMP_NAME, SALARY, HIRE_DATE, PHONE
FROM EMPLOYEE
WHERE SAL_LEVEL = 'S1';


----8. EMPLOYEE테이블에서 실수령액(6번 참고)이 5천만원 이상인 사원의 이름, 월급, 실수령액, 고용일 조회 --
SELECT EMP_NAME, SALARY, ((SALARY + SALARY * BONUS) * 12) - (SALARY * 12 * 1.03) AS "실수령액", HIRE_DATE
FROM EMPLOYEE
WHERE ((SALARY + SALARY * BONUS) * 12) - (SALARY * 12 * 1.03) >= 50000000;


--9. EMPLOYEE테이블에 월급이 4000000이상이고 JOB_CODE가 J2인 사원의 전체 내용 조회 
SELECT *
FROM EMPLOYEE
WHERE SALARY >= 4000000 AND JOB_CODE = 'J2';


--10. EMPLOYEE테이블에 DEPT_CODE가 D9이거나 D5인 사원 중  
--고용일이 02년 1월 1일보다 빠른 사원의 이름, 부서코드, 고용일 조회 
SELECT EMP_NAME, DEPT_CODE, HIRE_DATE
FROM EMPLOYEE
WHERE DEPT_CODE ='D9' OR DEPT_CODE = 'D5' AND HIRE_DATE >= '02/01/01';


--11. EMPLOYEE테이블에 고용일이 90/01/01 ~ 01/01/01인 사원의 전체 내용을 조회 
SELECT *
FROM EMPLOYEE
WHERE HIRE_DATE BETWEEN '90/01/01' AND '01/01/01';

--12. EMPLOYEE테이블에서 이름 끝이 '연'으로 끝나는 사원의 이름 조회 
SELECT EMP_NAME
FROM EMPLOYEE
WHERE EMP_NAME LIKE '%연';

--13. EMPLOYEE테이블에서 전화번호 처음 3자리가 010이 아닌 사원의 이름, 전화번호를 조회
SELECT EMP_NAME, PHONE
FROM EMPLOYEE
WHERE NOT PHONE LIKE '010%';

--14. EMPLOYEE테이블에서 메일주소 '_'의 앞이 4자이면서 DEPT_CODE가 D9 또는 D6이고  
--고용일이 90/01/01 ~ 00/12/01이고, 급여가 270만 이상인 사원의 전체를 조회 
SELECT *
FROM EMPLOYEE
WHERE EMAIL LIKE '____$_%' ESCAPE '$' AND DEPT_CODE IN('D9','D6') AND HIRE_DATE BETWEEN '90/01/01' AND '00/12/01' AND SALARY >= 2700000;

----15. EMPLOYEE테이블에서 사원 명과 직원의 주민번호를 이용하여 생년, 생월, 생일 조회 --
SELECT EMP_NAME, 
       SUBSTR(EMP_NO, 1, 2) AS "생년", 
       SUBSTR(EMP_NO, 3, 2) AS "생월", 
       SUBSTR(EMP_NO, 5, 2) AS "생일"
FROM EMPLOYEE;

--16. EMPLOYEE테이블에서 사원명, 주민번호 조회 (단, 주민번호는 생년월일만 보이게 하고, '-'다음 값은 '*'로 바꾸기) 
SELECT EMP_NAME, SUBSTR(EMP_NO, 1,7)|| '*******' AS "주민번호"
FROM EMPLOYEE;

----17. EMPLOYEE테이블에서 사원명, 입사일-오늘, 오늘-입사일 조회 
--(단, 각 별칭은 근무일수1, 근무일수2가 되도록 하고 모두 정수(내림), 양수가 되도록 처리) --
SELECT EMP_NAME, 
       HIRE_DATE, 
       FLOOR(SYSDATE - HIRE_DATE) AS "근무일수1", 
       FLOOR(SYSDATE - HIRE_DATE) AS "근무일수2"
FROM EMPLOYEE;

----18. EMPLOYEE테이블에서 사번이 홀수인 직원들의 정보 모두 조회 
--SELECT *
--FROM EMPLOYEE
--WHERE EMP_ID LIKE '__1','__3','__5','__7','__9';

SELECT *
FROM EMPLOYEE
WHERE MOD(EMP_ID, 2) IN (1, 3, 5, 7, 9);
--MOD 함수는 나머지 연산을 수행하는 함수 // MOD(EMP_ID, 2)는 EMP_ID 값을 2로 나누고 나머지를 구함


----19. EMPLOYEE테이블에서 근무 년수가 20년 이상인 직원 정보 조회 --
SELECT EMP_NAME, 
       EXTRACT(YEAR FROM HIRE_DATE) AS "입사년도"
FROM EMPLOYEE
WHERE HIRE_DATE <= ADD_MONTHS(SYSDATE, -20 * 12);


--20. EMPLOYEE 테이블에서 사원명, 급여 조회 (단, 급여는 '\9,000,000' 형식으로 표시) 
SELECT EMP_NAME, TO_CHAR(SALARY, 'L999,999,999')
FROM EMPLOYEE;


----21. EMPLOYEE테이블에서 직원 명, 부서코드, 생년월일, 나이(만) 조회 
--(단, 생년월일은 주민번호에서 추출해서 00년 00월 00일로 출력되게 하며 나이는 주민번호에서 출력해서 날짜데이터로 변환한 다음 계산) 
SELECT EMP_NAME, 
       DEPT_CODE, 
       TO_TIMESTAMP(SUBSTR(EMP_NO, 1, 6), 'YYMMDD') AS "생년월일",
       FLOOR(MONTHS_BETWEEN(SYSDATE, TO_TIMESTAMP(SUBSTR(EMP_NO, 1, 6), 'YYMMDD')) / 12) AS "나이"
FROM EMPLOYEE
WHERE EMP_NO IS NOT NULL;


----22. EMPLOYEE테이블에서 부서코드가 D5, D6, D9인 사원만 조회하되 D5면 총무부, D6면 기획부, D9면 영업부로 처리 
--(단, 부서코드 오름차순으로 정렬) --
SELECT EMP_NAME, 
       CASE 
           WHEN DEPT_CODE = 'D5' THEN '총무부'
           WHEN DEPT_CODE = 'D6' THEN '기획부'
           WHEN DEPT_CODE = 'D9' THEN '영업부'
       END AS "부서"
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D5', 'D6', 'D9')
ORDER BY DEPT_CODE;


----23. EMPLOYEE테이블에서 사번이 201번인 사원명, 주민번호 앞자리, 주민번호 뒷자리,  --주민번호 앞자리와 뒷자리의 합 조회  --
SELECT EMP_ID, EMP_NAME, EMP_NO,  
       SUBSTR(EMP_NO, 1, 6) || SUBSTR(EMP_NO, 7) AS "주민번호 합"
FROM EMPLOYEE
WHERE EMP_ID = 201;

--SELECT EMP_ID, EMP_NAME, EMP_NO
--FROM EMPLOYEE
--WHERE EMP_ID = '201', SUBSTR(EMP_NO,6,-1);


---24. EMPLOYEE테이블에서 부서코드가 D5인 직원의 보너스 포함 연봉 합 조회 <NVL> --
SELECT SUM(SALARY + SALARY * NVL(BONUS, 0)) * 12 --AS "부서코드가 D5인 직원의 보너스 포함 연봉 합"
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5';

----25. EMPLOYEE테이블에서 직원들의 입사일로부터 년도만 가지고 각 년도별 입사 인원수 조회 전체 직원 수, 
-- 2001년, 2002년, 2003년, 2004년 <어렵 >2001년은 몇명이다~ 표처럼 한번에 --
SELECT EXTRACT(YEAR FROM HIRE_DATE) AS "입사년도",
       COUNT(*) AS "입사인원수"
FROM EMPLOYEE
WHERE EXTRACT(YEAR FROM HIRE_DATE) IN (2001, 2002, 2003, 2004)
GROUP BY EXTRACT(YEAR FROM HIRE_DATE)
ORDER BY "입사년도";


-- NULL값 포함
SELECT EXTRACT(YEAR FROM HIRE_DATE) AS "입사년도", COUNT(*) AS "입사인원수"
FROM EMPLOYEE
GROUP BY EXTRACT(YEAR FROM HIRE_DATE)
HAVING EXTRACT(YEAR FROM HIRE_DATE) IN (2001, 2002, 2003, 2004)

UNION ALL

SELECT NULL AS "입사년도", COUNT(*) AS "입사인원수"
FROM EMPLOYEE;



-------------------------------- 실습 문제 ---------------------------------------
-- 1. 부서가 인사관리부인 사원들의 사번, 이름, 보너스 조회

SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DETP_ID

-->> 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, BONUS
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND DEPT_TITLE = '인사관리부';

-->> ANSI 구문

SELECT EMP_ID, EMP_NAME, BONUS
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '인사관리부';



-- 2. DEPARTMENT와 LOCATION을 참고해서 전체 부서의 부서코드, 부서명, 지역코드, 지역명 조회
-->> 오라클 전용 구문
SELECT * FROM DEPARTMENT; -- LOCATION_ID
SELECT * FROM LOCATION; -- LOCAL_CODE

SELECT DEPT_ID, DEPT_TITLE, LOCAL_CODE, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE LOCATION_ID = LOCAL_CODE;

SELECT * FROM DEPARTMENT; -- LOCATION_ID
SELECT * FROM LOCATION;-- LOCAL_CODE

-->> ANSI 구문
SELECT DEPT_ID, DEPT_TILTE, LOCATION_CODE, LOCATION_NAME
FROM DEPARTMENT
JOIN DEPARTMENT ON(LOCATION_ID = LOCAL_CODE);


-- 3. 보너스를 받는 사원들의 사번, 사원명, 보너스, 부서명 조회
SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DETP_ID

-->> 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND BONUS IS NOT NULL;

-->> ANSI 구문
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE BONUS IS NOT NULL;

--4. 부서가 총무부가 아닌 사원들의 사원명, 급여, 부서명 조회
SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DEPT_ID

-->> 오라클 전용 구문
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND DEPT_TITLE != '총무부';

-->> ANSI 구문
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE != '총무부';
-- 지금 현재 DEPT_CODE가 NULL인 것은 나오지 않고 있음





-------------------------------- 실습 문제 ---------------------------------------
-- 1. 부서가 인사관리부인 사원들의 사번, 이름, 보너스 조회

SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DETP_ID

-->> 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, BONUS
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND DEPT_TITLE = '인사관리부';

-->> ANSI 구문

SELECT EMP_ID, EMP_NAME, BONUS
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '인사관리부';



-- 2. DEPARTMENT와 LOCATION을 참고해서 전체 부서의 부서코드, 부서명, 지역코드, 지역명 조회
-->> 오라클 전용 구문
SELECT * FROM DEPARTMENT; -- LOCATION_ID
SELECT * FROM LOCATION; -- LOCAL_CODE

SELECT DEPT_ID, DEPT_TITLE, LOCAL_CODE, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE LOCATION_ID = LOCAL_CODE;

SELECT * FROM DEPARTMENT; -- LOCATION_ID
SELECT * FROM LOCATION;-- LOCAL_CODE

-->> ANSI 구문
SELECT DEPT_ID, DEPT_TILTE, LOCATION_CODE, LOCATION_NAME
FROM DEPARTMENT
JOIN DEPARTMENT ON(LOCATION_ID = LOCAL_CODE);


-- 3. 보너스를 받는 사원들의 사번, 사원명, 보너스, 부서명 조회
SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DETP_ID

-->> 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND BONUS IS NOT NULL;

-->> ANSI 구문
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE BONUS IS NOT NULL;

--4. 부서가 총무부가 아닌 사원들의 사원명, 급여, 부서명 조회
SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DEPT_ID

-->> 오라클 전용 구문
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID
AND DEPT_TITLE != '총무부';

-->> ANSI 구문
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE != '총무부';
-- 지금 현재 DEPT_CODE가 NULL인 것은 나오지 않고 있음



----------------------------------- 실습문제 -------------------------------------
-- 1. 사번, 사원명, 부서명, 지역명, 국가명 (EMP,DEP, NAT 조인)
SELECT * FROM EMPLOYEE; -- DEPT_CODE
SELECT * FROM DEPARTMENT; -- DEPT_ID    LOCATION_ID
SELECT * FROM LOCATION; --              LOCATION_CODE      NATIONAL_CODE
SELECT * FROM NATIONAL;--                                  NATIONAL_CODE

-- >> 오라클
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION L, NATIONAL N
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE
AND L.NATIONAL_CODE  = N.NATIONAL_CODE;

-- >> ANSI
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE);


-- 2. 사번, 사원명, 부서명, 직급명, 지역명, 국가명 해당 급여등급에서 받을 수 있는 최대 금액 조회(모든 테이블 조인)
SELECT * FROM EMPLOYEE; --   DEPT_CODE  JOB_CODE                                  SAL_LEVEL
SELECT * FROM DEPARTMENT; -- DEPT_ID               LOCATION_ID
SELECT * FROM JOB; --                   JOB_CODE
SELECT * FROM LOCATION; --                         LOCATION_CODE   NATIONAL_CODE
SELECT * FROM NATIONAL; --                                         NATIONAL_CODE
SELECT * FROM SAL_GRADE; --                                                       SAL_LEVEL                                 

-- >> 오라클
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, LOCAL_NAME, NATIONAL_NAME, MAX_SAL
FROM EMPLOYEE E, DEPARTMENT D, JOB J, LOCATION L, NATIONAL N, SAL_GRADE S
WHERE E.DEPT_CODE = D.DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND D.LOCATION_ID = L.LOCAL_CODE
AND L.NATIONAL_CODE  = N.NATIONAL_CODE
AND E.SAL_LEVEL = S.SAL_LEVEL;

-- >> ANSI
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, LOCAL_NAME, NATIONAL_NAME, MAX_SAL
FROM EMPLOYEE E
JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
JOIN JOB J USING(JOB_CODE)
JOIN LOCATION L ON (D.LOCATION_ID = L.LOCAL_CODE)
JOIN NATIONAL N USING(NATIONAL_CODE)
JOIN SAL_GRADE S USING(SAL_LEVEL);

